package math;

import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

class TestUnitTestGen {
	ASCIIMathTeXImg cut = new ASCIIMathTeXImg();

	@BeforeAll
	static void initAll() {
		System.out.println("\n\t@CsvSource({");
	}

	@ParameterizedTest
	@CsvSource(value = {
//single symbol output
		"!=",
		"!in",
		//"'''",
		"(",
		"(:",
		")",
		"*",
		"**",
		"***",
		"+-",
		"-",
		"-:",
		"-<",
		"-<=",
		"-=",
		"->",
		"->>",
		"-lt",
		"...",
		"/",
		"//",
		"/_",
		"/_\\",
		":)",
		":.",
		":=",
		":}",
		"<<",
		"<=",
		"<=>",
		"=>",
		">-",
		">-=",
		">->",
		">->>",
		"><|",
		">=",
		">>",
		"@",
		"AA",
		"CC",
		"Delta",
		"EE",
		"Gamma",
		"Lambda",
		"Lamda",
		"Leftarrow",
		"Leftrightarrow",
		"Lim",
		"NN",
		"O/",
		"Omega",
		"Phi",
		"Pi",
		"Psi",
		"QQ",
		"RR",
		"Rightarrow",
		"Sigma",
		"TT",
		"Theta",
		"Xi",
		"ZZ",
		"[",
		"'\\ '",
		"\\\\",
		"]",
		"^",
		"^^",
		"^^^",
		"_",
		"__|",
		"_|_",
		"abs",
		"aleph",
		"alpha",
		"and",
		"angle",
		"approx",
		"arccos",
		"arcsin",
		"arctan",
		"ast",
		"backslash",
		"bar",
		"bb",
		"bbb",
		"beta",
		"bigcap",
		"bigcup",
		"bigvee",
		"bigwedge",
		"bot",
		"bowtie",
		"cap",
		"cdot",
		"cdots",
		"ceil",
		"chi",
		"circ",
		"cong",
		"cos",
		"cosh",
		"cot",
		"coth",
		"csc",
		"csch",
		"cup",
		"darr",
		"ddot",
		"ddots",
		"del",
		"delta",
		"det",
		"diamond",
		"dim",
		"div",
		"divide",
		"dot",
		"downarrow",
		"dt",
		"dx",
		"dy",
		"dz",
		"emptyset",
		"epsi",
		"epsilon",
		"equiv",
		"eta",
		"exists",
		"exp",
		"f",
		"floor",
		"forall",
		"frown",
		"g",
		"gamma",
		"gcd",
		"ge",
		"geq",
		"glb",
		"grad",
		"gt",
		"mgt",
		"gt=",
		"hArr",
		"harr",
		"hat",
		"if",
		"iff",
		"implies",
		"in",
		"infty",
		"int",
		"iota",
		"kappa",
		"lArr",
		"lambda",
		"lamda",
		"langle",
		"larr",
		"lceiling",
		"lcm",
		"ldots",
		"le",
		"leftarrow",
		"leftrightarrow",
		"leq",
		"lfloor",
		"lim",
		"ln",
		"log",
		"lt",
		"mlt",
		"lt=",
		"ltimes",
		"lub",
		"mapsto",
		"max",
		"min",
		"mod",
		"models",
		"mu",
		"nabla",
		"ne",
		"neg",
		"nn",
		"nnn",
		"norm",
		"not",
		"notin",
		"nu",
		"o+",
		"o.",
		"obrace",
		"odot",
		"oint",
		"omega",
		"oo",
		"oplus",
		"or",
		"otimes",
		"overbrace",
		"overline",
		"ox",
		"partial",
		"phi",
		"pi",
		"pm",
		"prec",
		"preceq",
		"prime",
		"prod",
		"prop",
		"propto",
		"psi",
		"qquad",
		"quad",
		"rArr",
		"rangle",
		"rarr",
		"rceiling",
		"rfloor",
		"rho",
		"rightarrow",
		"rightarrowtail",
		"root",
		"rtimes",
		"sec",
		"sech",
		"setminus",
		"sigma",
		"sin",
		"sinh",
		"sqrt",
		"square",
		"stackrel",
		"star",
		"sub",
		"sube",
		"subset",
		"subseteq",
		"succ",
		"succeq",
		"sum",
		"sup",
		"supe",
		"supset",
		"supseteq",
		"tan",
		"tanh",
		"tau",
		"therefore",
		"theta",
		"tilde",
		"times",
		"to",
		"top",
		"triangle",
		"twoheadrightarrow",
		"twoheadrightarrowtail",
		"uarr",
		"ubrace",
		"ul",
		"underbrace",
		"underline",
		"underset",
		"uparrow",
		"upsilon",
		"uu",
		"uuu",
		"varepsilon",
		"varphi",
		"vartheta",
		"vdash",
		"vdots",
		"vec",
		"vee",
		"vv",
		"vvv",
		"wedge",
		"xi",
		"xx",
		"zeta",
		"{",
		"|",
		"|--",
		"|->",
		"|==",
		"|><",
		"|><|",
		"|__",
		"|~",
		"}",
		"~=",
		"~|",
		"~~",

//unary, binary, and accents
		"f(x)/g(x)",
		"sin(x)/2",
		"cosx/2",
		"absx",
		"norm x",
		"floor x/2",
		"ceil 5.2",
		"min_x 3",
		"sqrt4",
		"sqrt(x+1)",
		"root(3)(x)",
		"root3x",
		"stackrel3=",
		"stackrel(3)(=)",
		"overset(k)(=)",
		"underset(k)(=)",
		"tilde x",
		"hat x",
		"hat(xy)",
		"bar x",
		"vec x",
		"vec(xy)",
		"dot x",
		"ddot x",
		"ul x",
		"ubrace(x+1)",
		"obrace(x+1)",
		"mbox(hi)",
		"text(hi)",
		"\"hi\"",
		"cancel(x)",

//font and color
		"color(red)(x)",
		"bb(x)",
		"sf(x)",
		"bbb(x)",
		"cc(x)",
		"tt(x)",
		"fr(x)",

//basics
		"x",
		"2",
		"x^2",
		"x_2",
		"x_2^3",
		"2/3",
		"-2/3",
		"2-3",
		"(2+3)",

//braces
		"'2+(3/4+1)'",
		"'2+[3/4+1]'",
		"'2+|3/4+1|'",
		"'[2/3,4)'",
		"'{:2,3:}'",
		"'<<2,3>>'",
		"'(:2,3:)'",

//matrices and arrays
		"'[(2,3),(4,5)]'",
		"'[(2,3,4,5)]'",
		"'((1),(2))'",
		"'{(1,if,x ge 3),(2,if,x gt 3):}'",
		"'[(1,2,|,3),(4,5,|,6)]'",

//from the existing demos
		"int_2^3 3dx",
		"sum_(n=1)^3 n",
		"lim_(h->0)(f(x+h)-f(x))/h",
		"sin^-1(x)",
		"f(x)=sum_(n=0)^oo(f^((n))(a))/(n!)(x-a)^n",
		"f(x)=\\sum_{n=0}^\\infty\\frac{f^{(n)}(a)}{n!}(x-a)^n",
		"'(a,b]={x in RR | a < x <= b}'",
		"abc-123.45^-1.1",
		"stackrel\"def\"= or \\stackrel{\\Delta}{=}",
		"{::}_(\\ 92)^238U",
		"(cancel((x+1))(x-2))/(cancel((x+1))(x+3))",
		"a//b",
		"int_1^3 2x dx = x^2|_1^3",

//from issue 15 tests
		"log_2(x)/5",
		"log_2(x)+5",
		"log_sqrt(5)3/5",
		"log_2^5(x)+5",
		"2^f_2-3",
		"f_3(x)/5",
		"2^(f_3(x)/5)",
		"log_3x^2/5",
		"log_3x_0/5",
		"sin^2(x)/5",

//spaces can be used to break tokens
		"3+ -4",
		"3+-4",

//decimal place (if used as decimal separator) keeps token, but commas do not
		"'3^5.234'",
		"'3^5,233'",

//check I/I grammar
		"(x+1)/4",
		"sqrtx/4",
		"root(3)(5)/4",
		"3^2/4^2",
		"3_2/4_2",
		"3^2/4^2",
		"3_2/4_2",
		"3_2^3/4_2",
		"vecx/hat3+vecx^2+(vec x)^2 + vec(x^2)",
//negative handling
		"-3-4",
		"'(-3,-4)'",
		"-(-2-4)-5",
		"2_-4^-5",
		"int_-sqrt(3)^4",
		"-2/-3",
		"(-2)/-3",
		"-2/3-3/4",
		"-2^2",
		"-(x+1)/-(x+3)",

//issue 40
		"{:{:x:}:}",
		"{:1+{:x:}+3:}",

//issue37
		"'(:2,3]'",
		"'[2,3rangle'",
		"'2,3)'",
		"'(2,3'",

//issue42
		"'[(1,2,3,|,4),(5,6,7, |,8)]'",
		"'[(1,2,3, | ,4,5),(5,6,7, | ,8,9)]'",
		"'[(1,|,2,3,4),(5,|,6,7,8)]'",
		"'[(1,|,3,|,4),(5,|,7,|,8)]'",
		"'[(2,|x|,5),(3,|y|,4)]'",
		"'[(1,|,2,|x|,5),(3,|,4,|y|,7)]'",
		"'[(1,2,3,|,4),(5,6,7,8,9)]'",
		"'[(1,2,3,|,4),(5,6,7,8)]'",
		"'[(1,2,3,4,5),(5,6,7,|,9)]'",
		"'[(1,2,3,4),(5,6,7,|,9)]'",
		"'[(1,2,3,|),(5,6,7,|)]'",
		"'|x/2+3|,|x-4/5|'",
		"'int_2^4 2x dx = x^2|_2^4'",

//issue74
		"3+sin(x)/5-2Sin(x)",
		"5+sin(x)+Sin(x)+\"test Since\"",
		"Log(x)/3 +log(x)/3",
		"Abs(3) + abs(3)",

//issue86
		"3 + id(hi)(x^2)+class(red)(4)",

//issue 94
		"f^2(x)/5",
		"f^2x/5",
		"1/f^2x^2",
		"1/fx^2",
		"f'(x)/5",

// issue 113
		"'[[1,2]]/4'",
		"'(x+2)/3'",

// issue 114
		"u_-3 + u_- 3",
		"2^- +3",

// sim
		"'3~2,5sim4'",
//overparen
		"overparen(AB)",
		"overarc(AB)",

//mp
		"(x-+5)(xmp5)",

//bad/incomplete input
		"3/",
		"2^",
		"2^+3",
		"/4",
		"lim_(x rarr 2^-) f(x)",

// new tests for code coverage
		"text(f)",
		"text({f})",
		"text([f])",
		"text(  a)",
		"text(  a  )",
		"text<a>",
		"text<a >",
		"text{f}",
		"text[f]",
		"text{f",
		"text[f",
		"text{f abc",
	})
	void test(String input) {
		String res = cut.getTeX(input);
		input = input.replace("\\","\\\\");
		input = input.replace("\"", "\\\"");
		res = res.replace("\\","\\\\");
		System.out.printf("\t\" %-57s, '%s' \",%n", "'"+input+"'", res);
		assertNotNull(res, "Result must be not null");
	}

	@AfterAll
	static void terminateAll() {
		System.out.println("\t})");
	}
}